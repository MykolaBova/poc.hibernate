<!DOCTYPE html><html lang="en"><title>Hibernate &#8211; fetching strategies examples</title><head><link rel="stylesheet" type="text/css" href="http://www.mkyong.com/wp-content/cache/minify/000000/481ba/default.include.b22e3d.css" media="all" /><meta name="generator" content="WordPress 3.5.1" /><meta name="google-site-verification" content="VsVvSTVAouAluNodWeR30BeIWTr4c84HvN4Fn9WBsak" /><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="shortcut icon" href="/wp-content/themes/mkyong-ma/images/favicon.ico" /><script type='text/javascript' src='http://www.mkyong.com/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script><link rel='prev' title='Hibernate Criteria examples' href='http://www.mkyong.com/hibernate/hibernate-criteria-examples/' /><link rel='next' title='Java MD5 Hashing Example' href='http://www.mkyong.com/java/java-md5-hashing-example/' /><link rel='shortlink' href='http://www.mkyong.com/?p=3335' /><meta name="keywords" content="hibernate" /><link rel="canonical" href="http://www.mkyong.com/hibernate/hibernate-fetching-strategies-examples/" /></head><body><div id="header-top"><div class="container"><div id="header-top-container"><ul><li><a href="/advertise-on-mkyong/" rel="nofollow">Advertise</a></li><li><a href="/contact-mkyong/" rel="nofollow">Contact Us</a></li><li><a href="/write-for-us/" rel="nofollow">Write For Us</a></li><li> <a href="http://feeds.feedburner.com/FeedForMkyong" rel="nofollow" title="RSS feed">RSS feed</a></li><li><a href="/blog/donate-to-charity/" rel="nofollow">Donate</a></li></ul></div></div></div><div id="header"><div class="container"><div id="header-logo"> <a href="/" title="mkyong.com"><div id="logo" ></div> </a></div><div id="header-banner"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="728x90" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div></div></div><div id="menu"><div class="container"><ul><li class="menu-allround"> <a href="/">Home</a></li><li class="menu-allround"> <a href="/all-tutorials-on-mkyong-com/">All Tutorials</a></li><li class="menu-topround"> <a href="#">Java Core</a><div id="java-menu" class="dropdown"><div class="tut-title">Java Core Tutorials</div><div class="dropdown-item"> <a href="/tag/java/"><div class="images img-border img-java img-holder"></div> </a><div>1. <a href="/tutorials/java-io-tutorials/">Java I/O</a></div><div>2. <a href="/tutorials/java-xml-tutorials/">Java XML</a></div><div>3. <a href="/tutorials/java-json-tutorials/">Java JSON</a></div><div>4. <a href="/tutorials/java-regular-expression-tutorials/">Java RegEx</a></div><div>5. <a href="/tutorials/jdbc-tutorials/">JDBC</a></div><div>6. <a href="/tag/java/">Java Misc</a></div></div></div></li><li class="menu-topround"> <a href="#">JSF</a><div id="jsf-menu" class="dropdown"><div class="tut-title">JSF Tutorials</div><div class="dropdown-item"><a href="/tutorials/jsf-2-0-tutorials/"><div class="images img-border img-jsf2 img-holder"></div> </a><div>1. <a href="/tutorials/jsf-2-0-tutorials/">JSF 2.0</a></div></div></div></li><li class="menu-topround"> <a href="#">Spring</a><div id="spring-menu" class="dropdown"><div class="tut-title">Spring Tutorials</div><div class="dropdown-item"> <a href="/tutorials/spring-tutorials/"><div class="images img-border img-spring img-holder"></div> </a><div>1. <a href="/tutorials/spring-tutorials/">Spring Core</a></div><div>2. <a href="/tutorials/spring-mvc-tutorials/">Spring MVC</a></div><div>3. <a href="/tutorials/spring-security-tutorials/">Spring Security</a></div><div>4. <a href="/tutorials/java-mongodb-tutorials/#spring-mongodb">Spring MongoDB</a></div><div>5. <a href="/tutorials/spring-batch-tutorial/">Spring Batch</a></div></div></div></li><li class="menu-topround"> <a href="#">Hibernate</a><div id="hibernate-menu" class="dropdown"><div class="tut-title">Hibernate Tutorials</div><div class="dropdown-item"> <a href="/tutorials/hibernate-tutorials/"><div class="images img-border img-hibernate img-holder"></div> </a><div>1. <a href="/tutorials/hibernate-tutorials/">Hibernate Core</a></div></div></div></li><li class="menu-topround"> <a href="#">Struts</a><div id="struts-menu" class="dropdown"><div class="tut-title">Struts Tutorials</div><div class="dropdown-item"><a href="/tutorials/struts-2-tutorials/"><div class="images img-border img-struts img-holder"></div> </a><div>1. <a href="/tutorials/struts-tutorials/">Struts 1</a></div><div>2. <a href="/tutorials/struts-2-tutorials/">Struts 2</a></div></div></div></li><li class="menu-topround"> <a href="#">Android</a><div id="android-menu" class="dropdown"><div class="tut-title">Android Tutorials</div><div class="dropdown-item"> <a href="/tutorials/android-tutorial/"><div class="images img-border img-android img-holder"></div> </a><div>1. <a href="/tutorials/android-tutorial/">Android Core</a></div></div></div></li><li class="menu-topround"> <a href="#">Others</a><div id="misc-menu" class="dropdown"><div class="dropdown-item"><ol><li><a href="/tutorials/wicket-tutorials/">Apache Wicket</a></li><li><a href="/tutorials/jax-ws-tutorials/">JAX-WS (SOAP)</a></li><li><a href="/tutorials/jax-rs-tutorials/">JAX-RS (REST)</a></li><li><a href="/tutorials/maven-tutorials/">Maven</a></li><li><a href="/tutorials/google-app-engine-tutorial/">Google App Engine</a></li><li><a href="/tutorials/java-mongodb-tutorials/">Java MongoDB</a></li><li><a href="/tutorials/junit-tutorials/">jUnit</a></li><li><a href="/tutorials/testng-tutorials/">TestNG</a></li><li><a href="/tutorials/jquery-tutorials/">jQuery</a></li><li><a href="/tutorials/quartz-scheduler-tutorial/">Quartz Scheduler</a></li></ol></div></div></li></ul><div style="float:right;margin:4px 0"><form action="/search/" id="cse-search-box"><div> <input type="hidden" name="cx" value="partner-pub-2836379775501347:3714346998" /> <input type="hidden" name="cof" value="FORID:10" /> <input type="hidden" name="ie" value="UTF-8" /> <input type="text" name="q" size="30" style="height:20px;font-size:10pt;" /> <input type="submit" name="sa" value="Search" style="height:25px;"  /></div></form></div></div></div><div class="container"><div class="row"><div class="span10"><!-- google_ad_section_start(name=mkyongregion) --><div id="post-container"> <article class="post" id="post-3335"><header><h1> Hibernate &#8211; fetching strategies examples</h1><div class='post-meta'><div id="small-author-avatar"> <img alt='' src='http://0.gravatar.com/avatar/622c70d2908e68ecc070ca6754245bb2?s=40&amp;d=http%3A%2F%2Fwww.mkyong.com%2Fwp-content%2Fthemes%2Fmkyongnew%2Fimages%2Favatar-guest.jpg%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div> Posted on <time datetime="2010-02-21T07:37:30+00:00">February 21, 2010</time><span> , &nbsp;&nbsp;&nbsp; Last modified : January 29, 2010 </span><div> By <a href="http://www.mkyong.com/author/mkyong/" rel="author">mkyong</a></div></div></div> </header><div class="post-content"><div id='dd_light_ajax_float'><div id='dd_content_wrap'><div class='dd_light_button'><div class='dd-loading' id='dd-google' ></div><div class='g-plusone' data-size='tall'></div></div><div class='dd_light_button'><div class='dd-loading' id='dd-fblike' ></div><iframe id='dd-fblike-iframe' src='' height='0' width='0' scrolling='no' frameborder='0'></iframe></div><div class='dd_light_button'><div class='dd-loading' id='dd-twitter' ></div><a href='https://twitter.com/share' class='twitter-share-button' data-via='mkyong' data-count='vertical'></a></div></div></div><p>Hibernate has few fetching strategies to optimize the Hibernate generated select statement, so that it can be as efficient as possible. The fetching strategy is declared in the mapping relationship to define how Hibernate fetch its related collections and entities.</p><h3>Fetching Strategies</h3><p>There are four fetching strategies</p><p>1. fetch-&#8221;join&#8221; = Disable the lazy loading, always load all the collections and entities.<br /> 2. fetch-&#8221;select&#8221; (default) = Lazy load all the collections and entities.<br /> 3. batch-size=&#8221;N&#8221; = Fetching up to &#8216;N&#8217; collections or entities, *Not record*.<br /> 4. fetch-&#8221;subselect&#8221; = Group its collection into a sub select statement.</p><p>For detail explanation, you can check on the <a href="https://www.hibernate.org/315.html" target="_blank">Hibernate documentation</a>.</p><h3>Fetching strategies examples</h3><p>Here&#8217;s a &#8220;one-to-many relationship&#8221; example for the fetching strategies demonstration. A stock is belong to many stock daily records.</p><p><em>Example to declare fetch strategies in XML file</em></p><div class="wp_syntax"><div class="code"><pre class="xml" style="font-family:monospace;">...
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;hibernate-mapping<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;class</span> <span style="color: #000066;">name</span>=<span style="color: #ff0000;">&quot;com.mkyong.common.Stock&quot;</span> <span style="color: #000066;">table</span>=<span style="color: #ff0000;">&quot;stock&quot;</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;set</span> <span style="color: #000066;">name</span>=<span style="color: #ff0000;">&quot;stockDailyRecords&quot;</span>  <span style="color: #000066;">cascade</span>=<span style="color: #ff0000;">&quot;all&quot;</span> <span style="color: #000066;">inverse</span>=<span style="color: #ff0000;">&quot;true&quot;</span> </span>
<span style="color: #009900;">            <span style="color: #000066;">table</span>=<span style="color: #ff0000;">&quot;stock_daily_record&quot;</span> <span style="color: #000066;">batch-size</span>=<span style="color: #ff0000;">&quot;10&quot;</span> <span style="color: #000066;">fetch</span>=<span style="color: #ff0000;">&quot;select&quot;</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
            <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
                <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;column</span> <span style="color: #000066;">name</span>=<span style="color: #ff0000;">&quot;STOCK_ID&quot;</span> <span style="color: #000066;">not-null</span>=<span style="color: #ff0000;">&quot;true&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
            <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/key<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
            <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;one-to-many</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">&quot;com.mkyong.common.StockDailyRecord&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/set<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
    <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/class<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/hibernate-mapping<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre></div></div><p><em>Example to declare fetch strategies in annotation</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">...
@<span style="color: #003399;">Entity</span>
@Table<span style="color: #009900;">&#40;</span>name <span style="color: #339933;">=</span> <span style="color: #0000ff;">&quot;stock&quot;</span>, catalog <span style="color: #339933;">=</span> <span style="color: #0000ff;">&quot;mkyong&quot;</span><span style="color: #009900;">&#41;</span>
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Stock <span style="color: #000000; font-weight: bold;">implements</span> <span style="color: #003399;">Serializable</span><span style="color: #009900;">&#123;</span>
...
	@OneToMany<span style="color: #009900;">&#40;</span>fetch <span style="color: #339933;">=</span> FetchType.<span style="color: #006633;">LAZY</span>, mappedBy <span style="color: #339933;">=</span> <span style="color: #0000ff;">&quot;stock&quot;</span><span style="color: #009900;">&#41;</span>
	@Cascade<span style="color: #009900;">&#40;</span>CascadeType.<span style="color: #006633;">ALL</span><span style="color: #009900;">&#41;</span>
	@Fetch<span style="color: #009900;">&#40;</span>FetchMode.<span style="color: #006633;">SELECT</span><span style="color: #009900;">&#41;</span>
        @BatchSize<span style="color: #009900;">&#40;</span>size <span style="color: #339933;">=</span> <span style="color: #cc66cc;">10</span><span style="color: #009900;">&#41;</span>
	<span style="color: #000000; font-weight: bold;">public</span> Set<span style="color: #339933;">&lt;</span>StockDailyRecord<span style="color: #339933;">&gt;</span> getStockDailyRecords<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">return</span> <span style="color: #000000; font-weight: bold;">this</span>.<span style="color: #006633;">stockDailyRecords</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
...
<span style="color: #009900;">&#125;</span></pre></div></div><p>Let explore how fetch strategies affect the Hibernate generated SQL statement.</p><h4>1. fetch=&#8221;select&#8221; or @Fetch(FetchMode.SELECT)</h4><p>This is the default fetching strategy. it enabled the lazy loading of all it&#8217;s related collections. Let see the example&#8230;</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">//call select from stock</span>
Stock stock <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>Stock<span style="color: #009900;">&#41;</span>session.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>Stock.<span style="color: #000000; font-weight: bold;">class</span>, <span style="color: #cc66cc;">114</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> 
<span style="color: #003399;">Set</span> sets <span style="color: #339933;">=</span> stock.<span style="color: #006633;">getStockDailyRecords</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//call select from stock_daily_record</span>
<span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span> <span style="color: #003399;">Iterator</span> iter <span style="color: #339933;">=</span> sets.<span style="color: #006633;">iterator</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>iter.<span style="color: #006633;">hasNext</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span> 
      StockDailyRecord sdr <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>StockDailyRecord<span style="color: #009900;">&#41;</span> iter.<span style="color: #006633;">next</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDailyRecordId</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDate</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p><em>Output</em></p><div class="wp_syntax"><div class="code"><pre class="bash" style="font-family:monospace;">Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...from mkyong.stock
    where stock0_.STOCK_ID=?
&nbsp;
Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...from mkyong.stock_daily_record
    where stockdaily0_.STOCK_ID=?</pre></div></div><p>Hibernate generated two select statements</p><p>1. Select statement to retrieve the Stock records -<strong>session.get(Stock.class, 114)</strong><br /> 2. Select its related collections &#8211; <strong>sets.iterator()</strong></p><div><div style="margin:20px 0;"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7391621200" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h4>2. fetch=&#8221;join&#8221; or @Fetch(FetchMode.JOIN)</h4><p>The &#8220;join&#8221; fetching strategy will disabled the lazy loading of all it&#8217;s related collections. Let see the example&#8230;</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">//call select from stock and stock_daily_record</span>
Stock stock <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>Stock<span style="color: #009900;">&#41;</span>session.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>Stock.<span style="color: #000000; font-weight: bold;">class</span>, <span style="color: #cc66cc;">114</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> 
<span style="color: #003399;">Set</span> sets <span style="color: #339933;">=</span> stock.<span style="color: #006633;">getStockDailyRecords</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//no extra select</span>
<span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span> <span style="color: #003399;">Iterator</span> iter <span style="color: #339933;">=</span> sets.<span style="color: #006633;">iterator</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>iter.<span style="color: #006633;">hasNext</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span> 
      StockDailyRecord sdr <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>StockDailyRecord<span style="color: #009900;">&#41;</span> iter.<span style="color: #006633;">next</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDailyRecordId</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDate</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p><em>Output</em></p><div class="wp_syntax"><div class="code"><pre class="bash" style="font-family:monospace;">Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...
    from
        mkyong.stock stock0_ 
    left outer <span style="color: #c20cb9; font-weight: bold;">join</span>
        mkyong.stock_daily_record stockdaily1_ 
            on stock0_.STOCK_ID=stockdaily1_.STOCK_ID 
    where
        stock0_.STOCK_ID=?</pre></div></div><p>Hibernate generated only one select statement, it retrieve all its related collections when the Stock is initialized. -<strong>session.get(Stock.class, 114)</strong></p><p>1. Select statement to retrieve the Stock records and outer join its related collections.</p><div><div style="margin:20px 0;"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="3642936086" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h4>3. batch-size=&#8221;10&#8243; or @BatchSize(size = 10)</h4><p>This &#8216;batch size&#8217; fetching strategy is always misunderstanding by many Hibernate developers. Let see the *misunderstand* concept here&#8230;</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">Stock stock <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>Stock<span style="color: #009900;">&#41;</span>session.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>Stock.<span style="color: #000000; font-weight: bold;">class</span>, <span style="color: #cc66cc;">114</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> 
<span style="color: #003399;">Set</span> sets <span style="color: #339933;">=</span> stock.<span style="color: #006633;">getStockDailyRecords</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span> <span style="color: #003399;">Iterator</span> iter <span style="color: #339933;">=</span> sets.<span style="color: #006633;">iterator</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>iter.<span style="color: #006633;">hasNext</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span> 
      StockDailyRecord sdr <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>StockDailyRecord<span style="color: #009900;">&#41;</span> iter.<span style="color: #006633;">next</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDailyRecordId</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDate</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>What is your expected result, is this per-fetch 10 records from collection? See the output<br /> <em>Output</em></p><div class="wp_syntax"><div class="code"><pre class="bash" style="font-family:monospace;">Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...from mkyong.stock
    where stock0_.STOCK_ID=?
&nbsp;
Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...from mkyong.stock_daily_record
    where stockdaily0_.STOCK_ID=?</pre></div></div><p>The batch-size did nothing here, it is not how batch-size work. See this statement.</p><blockquote><p>The batch-size fetching strategy is not define how many records inside in the collections are loaded. Instead, it defines how many collections should be loaded.</p><p>&#8212; Repeat N times until you remember this statement &#8212;</p></blockquote><h5>Another example</h5><p>Let see another example, you want to print out all the stock records and its related stock daily records (collections) one by one.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">List<span style="color: #339933;">&lt;</span>Stock<span style="color: #339933;">&gt;</span> list <span style="color: #339933;">=</span> session.<span style="color: #006633;">createQuery</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;from Stock&quot;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">list</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">for</span><span style="color: #009900;">&#40;</span>Stock stock <span style="color: #339933;">:</span> list<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
&nbsp;
    <span style="color: #003399;">Set</span> sets <span style="color: #339933;">=</span> stock.<span style="color: #006633;">getStockDailyRecords</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span> <span style="color: #003399;">Iterator</span> iter <span style="color: #339933;">=</span> sets.<span style="color: #006633;">iterator</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>iter.<span style="color: #006633;">hasNext</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span> 
            StockDailyRecord sdr <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>StockDailyRecord<span style="color: #009900;">&#41;</span> iter.<span style="color: #006633;">next</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDailyRecordId</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDate</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><h5>No batch-size fetching strategy</h5><p><em>Output</em></p><div class="wp_syntax"><div class="code"><pre class="bash" style="font-family:monospace;">Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...
    from mkyong.stock stock0_
&nbsp;
Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...
    from mkyong.stock_daily_record stockdaily0_ 
    where stockdaily0_.STOCK_ID=?
&nbsp;
Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...
    from mkyong.stock_daily_record stockdaily0_ 
    where stockdaily0_.STOCK_ID=?
&nbsp;
Keep repeat the <span style="color: #000000; font-weight: bold;">select</span> statements....depend how many stock records <span style="color: #000000; font-weight: bold;">in</span> your table.</pre></div></div><p>If you have 20 stock records in the database, the Hibernate&#8217;s default fetching strategies will generate 20+1 select statements and hit the database.</p><p>1. Select statement to retrieve all the Stock records.<br /> 2. Select its related collection<br /> 3. Select its related collection<br /> 4. Select its related collection<br /> &#8230;.<br /> 21. Select its related collection</p><p>The generated queries are not efficient and caused a serious performance issue.</p><h5>Enabled the batch-size=&#8217;10&#8242; fetching strategy</h5><p>Let see another example with batch-size=&#8217;10&#8242; is enabled.<br /> <em>Output</em></p><div class="wp_syntax"><div class="code"><pre class="bash" style="font-family:monospace;">Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...
    from mkyong.stock stock0_
&nbsp;
Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...
    from mkyong.stock_daily_record stockdaily0_ 
    where
        stockdaily0_.STOCK_ID <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#40;</span>
            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
        <span style="color: #7a0874; font-weight: bold;">&#41;</span></pre></div></div><p>Now, Hibernate will per-fetch the collections, with a select *in* statement. If you have 20 stock records, it will generate 3 select statements.</p><p>1. Select statement to retrieve all the Stock records.<br /> 2. Select In statement to per-fetch its related collections (10 collections a time)<br /> 3. Select In statement to per-fetch its related collections (next 10 collections a time)</p><p>With batch-size enabled, it simplify the select statements from 21 select statements to 3 select statements.</p><h4>4. fetch=&#8221;subselect&#8221; or @Fetch(FetchMode.SUBSELECT)</h4><p>This fetching strategy is enable all its related collection in a sub select statement. Let see the same query again..</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">List<span style="color: #339933;">&lt;</span>Stock<span style="color: #339933;">&gt;</span> list <span style="color: #339933;">=</span> session.<span style="color: #006633;">createQuery</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;from Stock&quot;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">list</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">for</span><span style="color: #009900;">&#40;</span>Stock stock <span style="color: #339933;">:</span> list<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
&nbsp;
    <span style="color: #003399;">Set</span> sets <span style="color: #339933;">=</span> stock.<span style="color: #006633;">getStockDailyRecords</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #000000; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span> <span style="color: #003399;">Iterator</span> iter <span style="color: #339933;">=</span> sets.<span style="color: #006633;">iterator</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>iter.<span style="color: #006633;">hasNext</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span> 
            StockDailyRecord sdr <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>StockDailyRecord<span style="color: #009900;">&#41;</span> iter.<span style="color: #006633;">next</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDailyRecordId</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
            <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>sdr.<span style="color: #006633;">getDate</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p><em>Output</em></p><div class="wp_syntax"><div class="code"><pre class="bash" style="font-family:monospace;">Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...
    from mkyong.stock stock0_
&nbsp;
Hibernate: 
    <span style="color: #000000; font-weight: bold;">select</span> ...
    from
        mkyong.stock_daily_record stockdaily0_ 
    where
        stockdaily0_.STOCK_ID <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#40;</span>
            <span style="color: #000000; font-weight: bold;">select</span>
                stock0_.STOCK_ID 
            from
                mkyong.stock stock0_
        <span style="color: #7a0874; font-weight: bold;">&#41;</span></pre></div></div><p>With &#8220;subselect&#8221; enabled, it will create two select statements.</p><p>1. Select statement to retrieve all the Stock records.<br /> 2. Select all its related collections in a sub select query.</p><h3>Conclusion</h3><p>The fetching strategies are highly flexible and a very important tweak to optimize the Hibernate query, but if you used it in a wrong place, it will be a total disaster.</p><h4>Reference</h4><p>1. <a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/performance.html" target="_blank">http://docs.jboss.org/hibernate/core/3.3/reference/en/html/performance.html</a><br /> 2. <a href="https://www.hibernate.org/315.html" target="_blank">https://www.hibernate.org/315.html</a></p><div id="post-meta-extra"> Tags : <span class="post-tag"><a href="http://www.mkyong.com/tag/hibernate/" rel="tag">hibernate</a></span></div><div style="margin:20px 0;"><center><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7146814087" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></center></div><div id="author-info"><div id="big-author-avatar"> <img alt='' src='http://0.gravatar.com/avatar/622c70d2908e68ecc070ca6754245bb2?s=100&amp;d=http%3A%2F%2Fwww.mkyong.com%2Fwp-content%2Fthemes%2Fmkyongnew%2Fimages%2Favatar-guest.jpg%3Fs%3D100&amp;r=G' class='avatar avatar-100 photo' height='100' width='100' /></div><div id="author-description"><div id="author-link"> <a href="http://www.mkyong.com/author/mkyong/" rel="author"> mkyong </a></div> Founder of Mkyong.com, love Java and open source stuff. Follow him on <a href="https://twitter.com/mkyong">Twitter</a>, or befriend him on <a href="http://www.facebook.com/java.tutorial">Facebook</a> or <a href="https://plus.google.com/110948163568945735692?rel=author">Google Plus</a>. If you like my tutorials, consider making a <a href="http://www.mkyong.com/blog/donate-to-charity/">donation to the charity</a>, thanks.</div><div class="clearboth"></div></div><div id="post-after-related-post"><h4  class="related_post_title">Related Posts</h4><ul class="related_post"><li><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-xml-example/" title="Spring Security + Hibernate XML Example">Spring Security + Hibernate XML Example</a></li><li><a href="http://www.mkyong.com/hibernate/java-lang-classnotfoundexception-org-hibernate-service-jta-platform-spi-jtaplatform/" title="java.lang.ClassNotFoundException: org.hibernate.service.jta.platform.spi.JtaPlatform">java.lang.ClassNotFoundException: org.hibernate.service.jta.platform.spi.JtaPlatform</a></li><li><a href="http://www.mkyong.com/hibernate/hibernate-component-mapping-example/" title="Hibernate component mapping example">Hibernate component mapping example</a></li><li><a href="http://www.mkyong.com/hibernate/hibernate-many-to-many-example-join-table-extra-column-annotation/" title="Hibernate &#8211; Many-to-Many example &#8211; join table + extra column (Annotation) ">Hibernate &#8211; Many-to-Many example &#8211; join table + extra column (Annotation) </a></li><li><a href="http://www.mkyong.com/hibernate/hibernate-many-to-many-relationship-example-annotation/" title="Hibernate – Many-to-Many example (Annotation)">Hibernate – Many-to-Many example (Annotation)</a></li></ul></div><div id="post-after-popular-post"><h4>Popular Posts</h4><ul><li><a href="/featured/top-8-java-people-you-should-know/">Top 8 Java People You Should Know</a></li><li><a href="/featured/top-20-java-websites/">Top 20 Java Websites</a></li><li><a href="/featured/top-5-free-java-ebooks/">Top 5 Free Java eBooks</a></li><li><a href="/regular-expressions/10-java-regular-expression-examples-you-should-know/">Top 10 Java Regular Expression Examples</a></li><li><a href="/featured/top-5-open-source-qa-systems/">Top 5 Open Source Q&A Systems</a></li></ul></div><div class="clearboth"></div></div></article><div id='st-tutorial-list'><div id='st-tutorial-title'> You might also like following tutorials :</div><ul><li><a href='/tutorials/hibernate-tutorials/' title='Hibernate Tutorials'><div class='images img-border img-hibernate'></div></a></li><li><a href='/tutorials/spring-security-tutorials/' title='Spring Security Tutorials'><div class='images img-border img-spring'></div></a></li><li><a href='/tutorials/jax-ws-tutorials/' title='JAX-WS Tutorials'><div class='images img-border img-jaxws'></div></a></li><li><a href='/tutorials/quartz-scheduler-tutorial/' title='Quartz Scheduler Tutorials'><div class='images img-border img-quartz'></div></a></li><li><a href='/tag/java/' title='Java Tutorials'><div class='images img-border img-java'></div></a></li></ul><div class='clearboth'></div></div><div style="padding:0 20px 20px 0"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="728x90" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div><div id="post-comments"><div id="disqus_thread"><div id="dsq-content"><ul id="dsq-comments"><li class="comment even thread-even depth-1" id="dsq-comment-138418"><div id="dsq-comment-header-138418" class="dsq-comment-header"> <cite id="dsq-cite-138418"> <span id="dsq-author-user-138418">Aravind</span> </cite></div><div id="dsq-comment-body-138418" class="dsq-comment-body"><div id="dsq-comment-message-138418" class="dsq-comment-message"><p>A very nice post. But I&#8217;m still trying to make it work.<br /> I&#8217;m trying to use @Fetch(FetchMode.SUBSELECT) on OneToMany mapped set collection. But when I run a test program it still generates many queries. What could be the reason?</p></div></div></li><li class="post pingback"><p>Pingback: <a href='http://mauroprogramsite.wordpress.com/2013/09/24/hibernate-lazy-loading-eager-loading/' rel='external nofollow' class='url'>hibernate-lazy-loading-eager-loading | mauroprogram&#039;s Blog</a></p></li></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-137839"><div id="dsq-comment-header-137839" class="dsq-comment-header"> <cite id="dsq-cite-137839"> http://<a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="a9c3c0ddccc7cddbc887dac0c7cec1989be9cec4c8c0c587cac6c4">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script> <span id="dsq-author-user-137839">Jitendra</span> </cite></div><div id="dsq-comment-body-137839" class="dsq-comment-body"><div id="dsq-comment-message-137839" class="dsq-comment-message"><p>Nice Explanation.</p><p>I have a question here with some different situation here.</p><p>Suppose i a have parent object/entity as a Stock and its child collection as a StockDailyRecord. In StockDailyRecord i have a property like activeRecord (Value could be Y/N). Now i want to perform an eager loading for parent.child collection&#8217;s which are active(setted Y).</p><p>Stock.StockDailyRecord.activeRecord  = &#8216;Y&#8217;.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-137437"><div id="dsq-comment-header-137437" class="dsq-comment-header"> <cite id="dsq-cite-137437"> <span id="dsq-author-user-137437">krishna</span> </cite></div><div id="dsq-comment-body-137437" class="dsq-comment-body"><div id="dsq-comment-message-137437" class="dsq-comment-message"><p>Sorry, I forget to add how I am mapping..</p><p>I am doing one-to-many mapping by using fetching strategy as &#8220;select&#8221; and I got the following error while trying to get the mapped object.</p><p>org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role:  could not initialize proxy &#8211; no Session</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-137425"><div id="dsq-comment-header-137425" class="dsq-comment-header"> <cite id="dsq-cite-137425"> <span id="dsq-author-user-137425">krishna</span> </cite></div><div id="dsq-comment-body-137425" class="dsq-comment-body"><div id="dsq-comment-message-137425" class="dsq-comment-message"><p>I am using this but lazy load is not working. Do I need to do any more configurations to make lazy load workable.?</p><p>Thanks,<br /> Krishna</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-133177"><div id="dsq-comment-header-133177" class="dsq-comment-header"> <cite id="dsq-cite-133177"> <span id="dsq-author-user-133177">Diyyana Kishore Babu</span> </cite></div><div id="dsq-comment-body-133177" class="dsq-comment-body"><div id="dsq-comment-message-133177" class="dsq-comment-message"><p>@ Diyyana Kishore Babu.<br /> Really very good explanation, but one small correction for ?fetch=?select?? strategy.<br /> You mentioned as<br /> ?Hibernate generated two select statements<br /> 1. Select statement to retrieve the Stock records -session.get(Stock.class, 114)<br /> 2. Select its related collections ? sets.iterator()?.</p><p>Actually it generate   1(stock) + n(stock_daily_record)  for select fetch.</p><p>Let?s say stock_daily_record have 10 records it generate 10 select statements and one select statement for stock table.</p><p>So Hibernate generate 11 (1+10) select statements for ?select? fetch strategy.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-133176"><div id="dsq-comment-header-133176" class="dsq-comment-header"> <cite id="dsq-cite-133176"> <span id="dsq-author-user-133176">Diyyana Kishore Babu</span> </cite></div><div id="dsq-comment-body-133176" class="dsq-comment-body"><div id="dsq-comment-message-133176" class="dsq-comment-message"><p>Really very good explanation, but one small correction for ?fetch=?select?? strategy.<br /> You mentioned as<br /> ?Hibernate generated two select statements<br /> 1. Select statement to retrieve the Stock records -session.get(Stock.class, 114)<br /> 2. Select its related collections ? sets.iterator()?.</p><p>Actually it generate   1(stock) + n(stock_daily_record)  for select fetch.</p><p>Let?s say stock_daily_record have 10 records it generate 10 select statements and one select statement for stock table.</p><p>So Hibernate generate 11 (1+10) select statements for &#8216;select&#8217; fetch strategy.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-133126"><div id="dsq-comment-header-133126" class="dsq-comment-header"> <cite id="dsq-cite-133126"> <span id="dsq-author-user-133126">geelong</span> </cite></div><div id="dsq-comment-body-133126" class="dsq-comment-body"><div id="dsq-comment-message-133126" class="dsq-comment-message"><p>how to define how many records inside in the collections are loaded.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-124608"><div id="dsq-comment-header-124608" class="dsq-comment-header"> <cite id="dsq-cite-124608"> <span id="dsq-author-user-124608">Maharsh</span> </cite></div><div id="dsq-comment-body-124608" class="dsq-comment-body"><div id="dsq-comment-message-124608" class="dsq-comment-message"><p>Excellent explanation of fetching strategy with wonderful example !! Thanks.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-115314"><div id="dsq-comment-header-115314" class="dsq-comment-header"> <cite id="dsq-cite-115314"> <span id="dsq-author-user-115314">prashanth</span> </cite></div><div id="dsq-comment-body-115314" class="dsq-comment-body"><div id="dsq-comment-message-115314" class="dsq-comment-message"><p>very nice examples easy to understand&#8230;&#8230;..</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-112014"><div id="dsq-comment-header-112014" class="dsq-comment-header"> <cite id="dsq-cite-112014"> <span id="dsq-author-user-112014">Manish</span> </cite></div><div id="dsq-comment-body-112014" class="dsq-comment-body"><div id="dsq-comment-message-112014" class="dsq-comment-message"><p>Thanks Mkyong for posting very nice article and in a simple way also!!</p><p>What is difference between lazy=true and fetch=select as both are responsible to trigger lazy initialization for associated collection.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-84118"><div id="dsq-comment-header-84118" class="dsq-comment-header"> <cite id="dsq-cite-84118"> <span id="dsq-author-user-84118">SIddhant</span> </cite></div><div id="dsq-comment-body-84118" class="dsq-comment-body"><div id="dsq-comment-message-84118" class="dsq-comment-message"><p>What is meaning of FetchMode.LAZY and FetchMode.EAGER ..?</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-83907"><div id="dsq-comment-header-83907" class="dsq-comment-header"> <cite id="dsq-cite-83907"> http://www.mehmetperk.com <span id="dsq-author-user-83907">mperk</span> </cite></div><div id="dsq-comment-body-83907" class="dsq-comment-body"><div id="dsq-comment-message-83907" class="dsq-comment-message"><p>I try this example. But I have error<br /> Exception in thread &#8220;main&#8221; org.hibernate.LazyInitializationException: could not initialize proxy &#8211; no Session</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-83679"><div id="dsq-comment-header-83679" class="dsq-comment-header"> <cite id="dsq-cite-83679"> <span id="dsq-author-user-83679">Cristian Ortiz</span> </cite></div><div id="dsq-comment-body-83679" class="dsq-comment-body"><div id="dsq-comment-message-83679" class="dsq-comment-message"><p>Hey Guys there is a possible of doing a OneToMany relationship using criteria and pagination methods(setMaxResult and setFirstResult) and completely LAZY loading the Many relationship[IS Loaded Eagerly on Annotations] thanks a lot.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-83237"><div id="dsq-comment-header-83237" class="dsq-comment-header"> <cite id="dsq-cite-83237"> <span id="dsq-author-user-83237">amit</span> </cite></div><div id="dsq-comment-body-83237" class="dsq-comment-body"><div id="dsq-comment-message-83237" class="dsq-comment-message"><p>very nice article.<br /> Thanks for posting this one.</p><p>Thanks,<br /> Amit</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-83212"><div id="dsq-comment-header-83212" class="dsq-comment-header"> <cite id="dsq-cite-83212"> <span id="dsq-author-user-83212">Anon</span> </cite></div><div id="dsq-comment-body-83212" class="dsq-comment-body"><div id="dsq-comment-message-83212" class="dsq-comment-message"><p>&#8220;The fetching strategies are highly flexible and a very important tweak to optimize the Hibernate query, but if you used it in a wrong place, it will be a total disaster.&#8221;</p><p>&#8211; why are we all dancing around &#8220;disaster&#8221; again?  We all know how JDBC is going to behave.  Is it really that hard to read a result set or use a JdbcTemplate or something simple like iBatis?  What does hibernate give us that justifies flirting with disaster?</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-82966"><div id="dsq-comment-header-82966" class="dsq-comment-header"> <cite id="dsq-cite-82966"> <span id="dsq-author-user-82966">belatrix</span> </cite></div><div id="dsq-comment-body-82966" class="dsq-comment-body"><div id="dsq-comment-message-82966" class="dsq-comment-message"><p>great article, I only have single doubt , how to restrict elements in collections directly on query level ? because the fetchmode=join causes all elements in collection to be fetched and if I apply a Restrictions on associated entities&#8217; properties, It gives me, property not found exception</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-82096"><div id="dsq-comment-header-82096" class="dsq-comment-header"> <cite id="dsq-cite-82096"> <span id="dsq-author-user-82096">Vijay</span> </cite></div><div id="dsq-comment-body-82096" class="dsq-comment-body"><div id="dsq-comment-message-82096" class="dsq-comment-message"><p>I have no words to thank you! Just the explanation I was looking for. Great work ..Kudos to you!</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-81944"><div id="dsq-comment-header-81944" class="dsq-comment-header"> <cite id="dsq-cite-81944"> <span id="dsq-author-user-81944">Suresh Siva</span> </cite></div><div id="dsq-comment-body-81944" class="dsq-comment-body"><div id="dsq-comment-message-81944" class="dsq-comment-message"><p>Very sharp and crisp explanation&#8230;very neat&#8230;.Thanks&#8230;</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-79154"><div id="dsq-comment-header-79154" class="dsq-comment-header"> <cite id="dsq-cite-79154"> <span id="dsq-author-user-79154">Adarsh</span> </cite></div><div id="dsq-comment-body-79154" class="dsq-comment-body"><div id="dsq-comment-message-79154" class="dsq-comment-message"><p>It was very helpful.<br /> Got exactly what i was looking for. GREAT</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-77857"><div id="dsq-comment-header-77857" class="dsq-comment-header"> <cite id="dsq-cite-77857"> <span id="dsq-author-user-77857">HibLearner</span> </cite></div><div id="dsq-comment-body-77857" class="dsq-comment-body"><div id="dsq-comment-message-77857" class="dsq-comment-message"><p>Suppose I have an Order table with 50 columns and I have an Order class with 50 properties and mapped with each other in hibernate file. I just want to show order list to the user which may have at most 3 to 4 columns like order_id, date, placed_by and order_amount. My problem starts here&#8230; when I load rows through the class, all 50 columns will be loaded along with the required just 4 columns which may impact the performance significantly. And sometime I want to load one (1) order with say 20 columns and sometime want to load a complete order with 50 columns. How can I map these three (3) different scenarios.</p><p>Thanks in advance.</p></div></div><ul class="children"><li class="comment even depth-2" id="dsq-comment-82465"><div id="dsq-comment-header-82465" class="dsq-comment-header"> <cite id="dsq-cite-82465"> <span id="dsq-author-user-82465">bekbote</span> </cite></div><div id="dsq-comment-body-82465" class="dsq-comment-body"><div id="dsq-comment-message-82465" class="dsq-comment-message"><div class="wp_syntax"><div class="code"><pre class="html4strict" style="font-family:monospace;"> I have tried this scenario with Criteria.setProjection(Projections.property(...))</pre></div></div></div></div></li></ul></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-77141"><div id="dsq-comment-header-77141" class="dsq-comment-header"> <cite id="dsq-cite-77141"> <span id="dsq-author-user-77141">Shan Udt</span> </cite></div><div id="dsq-comment-body-77141" class="dsq-comment-body"><div id="dsq-comment-message-77141" class="dsq-comment-message"><p>Man you rock..Please keep up the good work. We appreciate it a lot!</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-76850"><div id="dsq-comment-header-76850" class="dsq-comment-header"> <cite id="dsq-cite-76850"> <span id="dsq-author-user-76850">Jayanta Banerjee</span> </cite></div><div id="dsq-comment-body-76850" class="dsq-comment-body"><div id="dsq-comment-message-76850" class="dsq-comment-message"><p>One word regarding this site is &#8220;GREAT&#8221;. Very good examples. Please keep it up.</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-72945"><div id="dsq-comment-header-72945" class="dsq-comment-header"> <cite id="dsq-cite-72945"> <span id="dsq-author-user-72945">Yogesh</span> </cite></div><div id="dsq-comment-body-72945" class="dsq-comment-body"><div id="dsq-comment-message-72945" class="dsq-comment-message"><p>Couldn&#8217;t leave this page without saying thanks&#8230;</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-72222"><div id="dsq-comment-header-72222" class="dsq-comment-header"> <cite id="dsq-cite-72222"> <span id="dsq-author-user-72222">Chris L</span> </cite></div><div id="dsq-comment-body-72222" class="dsq-comment-body"><div id="dsq-comment-message-72222" class="dsq-comment-message"><p>Very nice written article. Concise and easy to following.</p><p>Only one question, quote<br /> &#8220;&#8230;The “join” fetching strategy will disabled the lazy loading of all it’s related collections&#8230;&#8221;</p><p>Let&#8217;s say only the following is executed:</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">   Stock stock <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>Stock<span style="color: #009900;">&#41;</span>session.<span style="color: #006633;">get</span><span style="color: #009900;">&#40;</span>Stock.<span style="color: #000000; font-weight: bold;">class</span>, <span style="color: #cc66cc;">114</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><p>I would suspect, the query output should only be:</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">    select ...<span style="color: #006633;">from</span> mkyong.<span style="color: #006633;">stock</span>
       where stock0_.<span style="color: #006633;">STOCK_ID</span><span style="color: #339933;">=?</span></pre></div></div><p>NOT</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">   select ...
    <span style="color: #006633;">from</span>
        mkyong.<span style="color: #006633;">stock</span> stock0_ 
    left outer join
        mkyong.<span style="color: #006633;">stock_daily_record</span> stockdaily1_ 
            on stock0_.<span style="color: #006633;">STOCK_ID</span><span style="color: #339933;">=</span>stockdaily1_.<span style="color: #006633;">STOCK_ID</span> 
    where
        stock0_.<span style="color: #006633;">STOCK_ID</span><span style="color: #339933;">=?</span></pre></div></div><p>Or I missed anything?</p><p>Thanks<br /> -Chris</p></div></div><ul class="children"><li class="comment odd alt depth-2" id="dsq-comment-82970"><div id="dsq-comment-header-82970" class="dsq-comment-header"> <cite id="dsq-cite-82970"> <span id="dsq-author-user-82970">Mansour</span> </cite></div><div id="dsq-comment-body-82970" class="dsq-comment-body"><div id="dsq-comment-message-82970" class="dsq-comment-message"><p>Disable the lazy loading means that Hibernate is going to load the collections or the associations.</p><p>Best regards.</p></div></div></li><li class="comment even depth-2" id="dsq-comment-122059"><div id="dsq-comment-header-122059" class="dsq-comment-header"> <cite id="dsq-cite-122059"> <span id="dsq-author-user-122059">Kumaran</span> </cite></div><div id="dsq-comment-body-122059" class="dsq-comment-body"><div id="dsq-comment-message-122059" class="dsq-comment-message"><p>Hi Chris,</p><p>I agree with you that even after specifing fetch = &#8220;Join&#8221; I see 2 queries getting fired for the sample you have provided .One for stock and one for stock details. mkyong can you please us know ?</p><p>Thanks<br /> Kumaran</p></div></div></li></ul></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-66320"><div id="dsq-comment-header-66320" class="dsq-comment-header"> <cite id="dsq-cite-66320"> <span id="dsq-author-user-66320">Piyoosh Sinha</span> </cite></div><div id="dsq-comment-body-66320" class="dsq-comment-body"><div id="dsq-comment-message-66320" class="dsq-comment-message"><p>Very big fan of you.again very nice article presented by you. Thanks</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-57829"><div id="dsq-comment-header-57829" class="dsq-comment-header"> <cite id="dsq-cite-57829"> <span id="dsq-author-user-57829">Satish Pandey</span> </cite></div><div id="dsq-comment-body-57829" class="dsq-comment-body"><div id="dsq-comment-message-57829" class="dsq-comment-message"><p>Thank you @mkyong for placing such a good article with examples.<br /> The article only takes 10-15 minutes to understand the fetching strategies with examples.</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-49552"><div id="dsq-comment-header-49552" class="dsq-comment-header"> <cite id="dsq-cite-49552"> <span id="dsq-author-user-49552">Arby</span> </cite></div><div id="dsq-comment-body-49552" class="dsq-comment-body"><div id="dsq-comment-message-49552" class="dsq-comment-message"><p>If the Batch setting is specified either as annotation on the class or in xml against the table, it is a one time decision. Not sure how practical this feature is.</p><p>The application use case should be dictating how many records I want to fetch. Besides I will not know how many records will be returned. So all we are doing is taking a lucky guess as the batch size.</p><p>I don&#8217;t see myself ever using the feature. I see myself using the Query feature to control how many records are returned.</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-48378"><div id="dsq-comment-header-48378" class="dsq-comment-header"> <cite id="dsq-cite-48378"> <span id="dsq-author-user-48378">Bill Leonard</span> </cite></div><div id="dsq-comment-body-48378" class="dsq-comment-body"><div id="dsq-comment-message-48378" class="dsq-comment-message"><p>Great info &#8212; this is how information should be presented &#8211; present the concept then show the specific details for each concept.  Thanks.</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-41954"><div id="dsq-comment-header-41954" class="dsq-comment-header"> <cite id="dsq-cite-41954"> http://pressmo.com <span id="dsq-author-user-41954">Kamilla</span> </cite></div><div id="dsq-comment-body-41954" class="dsq-comment-body"><div id="dsq-comment-message-41954" class="dsq-comment-message"><p>Very good article with clear explanation and examples.</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-29270"><div id="dsq-comment-header-29270" class="dsq-comment-header"> <cite id="dsq-cite-29270"> <span id="dsq-author-user-29270">Pankaj Pushp</span> </cite></div><div id="dsq-comment-body-29270" class="dsq-comment-body"><div id="dsq-comment-message-29270" class="dsq-comment-message"><p>very useful..nice to see this kind of article&#8230;thanks a lot</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-27906"><div id="dsq-comment-header-27906" class="dsq-comment-header"> <cite id="dsq-cite-27906"> <span id="dsq-author-user-27906">lim tou ee</span> </cite></div><div id="dsq-comment-body-27906" class="dsq-comment-body"><div id="dsq-comment-message-27906" class="dsq-comment-message"><p>your examples are simple but straight to the point.<br /> Easy to understand too.</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-21110"><div id="dsq-comment-header-21110" class="dsq-comment-header"> <cite id="dsq-cite-21110"> <span id="dsq-author-user-21110">RM</span> </cite></div><div id="dsq-comment-body-21110" class="dsq-comment-body"><div id="dsq-comment-message-21110" class="dsq-comment-message"><p>Very nice article, which not only explains fetching strategies but also n+1 select problem.Thank you.</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-19795"><div id="dsq-comment-header-19795" class="dsq-comment-header"> <cite id="dsq-cite-19795"> <span id="dsq-author-user-19795">ravi</span> </cite></div><div id="dsq-comment-body-19795" class="dsq-comment-body"><div id="dsq-comment-message-19795" class="dsq-comment-message"><p>Its really good site for Hibernate Updates.. Thank you so much..</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-6895"><div id="dsq-comment-header-6895" class="dsq-comment-header"> <cite id="dsq-cite-6895"> <span id="dsq-author-user-6895">Ajju</span> </cite></div><div id="dsq-comment-body-6895" class="dsq-comment-body"><div id="dsq-comment-message-6895" class="dsq-comment-message"><p>Short and descriptive, well done. Hoping to see more topics covered.</p></div></div></li><li class="post pingback"><p>Pingback: <a href='http://www.mkyong.com/tutorials/hibernate-tutorials/' rel='external nofollow' class='url'>Hibernate Tutorials | Tutorials</a></p></li></li></ul></div></div><script type="text/javascript">/*<![CDATA[*/var disqus_url='http://www.mkyong.com/hibernate/hibernate-fetching-strategies-examples/';var disqus_identifier='3335 http://www.mkyong.com/?p=3335';var disqus_container_id='disqus_thread';var disqus_domain='disqus.com';var disqus_shortname='mkyong';var disqus_title="Hibernate &#8211; fetching strategies examples";var disqus_config=function(){var config=this;config.language='';config.callbacks.preData.push(function(){document.getElementById(disqus_container_id).innerHTML='';});config.callbacks.onReady.push(function(){var script=document.createElement('script');script.async=true;script.src='?cf_action=sync_comments&post_id=3335';var firstScript=document.getElementsByTagName("script")[0];firstScript.parentNode.insertBefore(script,firstScript);});};/*]]>*/</script><script type="text/javascript">/*<![CDATA[*/var DsqLocal={'trackbacks':[{'author_name':"Hibernate Tutorials | Tutorials",'author_url':"http:\/\/www.mkyong.com\/tutorials\/hibernate-tutorials\/",'date':"03\/31\/2010 08:21 AM",'excerpt':"[...] Hibernate &#8211; fetching strategies examples Hibernate fetching strategies are used to optimize the Hibernate generated select statement, a must &hellip;",'type':"pingback"},{'author_name':"hibernate-lazy-loading-eager-loading | mauroprogram&#039;s Blog",'author_url':"http:\/\/mauroprogramsite.wordpress.com\/2013\/09\/24\/hibernate-lazy-loading-eager-loading\/",'date':"09\/24\/2013 06:46 PM",'excerpt':"[&#8230;] http:\/\/www.mkyong.com\/hibernate\/hibernate-fetching-strategies-examples\/ [&#8230;] ",'type':"pingback"}],'trackback_url':"http:\/\/www.mkyong.com\/hibernate\/hibernate-fetching-strategies-examples\/trackback\/"};/*]]>*/</script><script type="text/javascript">/*<![CDATA[*/(function(){var dsq=document.createElement('script');dsq.type='text/javascript';dsq.async=true;dsq.src='//'+disqus_shortname+'.'+'disqus.com'+'/embed.js?pname=wordpress&pver=2.74';(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(dsq);})();/*]]>*/</script></div></div><!-- google_ad_section_end --></div><div class="span4"><div id="sidebar"><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7072877400" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="5738517670" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads" id="sidebar-fb"><div class='dd-loading' id='dd-fbpage'></div><iframe id='dd-fbpage-iframe' src='' height='0' width='0' scrolling='no' frameborder='0' style="border:none;overflow:hidden;" allowTransparency="true" ></iframe></div><div class="sidebar-ads"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="300x250" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div><h2>Recent Posts</h2><div class="block"><ul><li><img width="32" height="17" src="http://www.mkyong.com/wp-content/uploads/2014/07/jsf-log4j-logo-150x80.jpg" class="attachment-32x32 wp-post-image" alt="jsf log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/jsf2/jsf-2-log4j-integration-example/">JSF 2 + Log4j Integration Example </a></div><div class="clearboth"></div></li><li><img width="32" height="29" src="http://www.mkyong.com/wp-content/uploads/2014/07/logo-150x139.jpg" class="attachment-32x32 wp-post-image" alt="log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/logging/log4j-hello-world-example/">Log4j hello world example </a></div><div class="clearboth"></div></li><li><img width="32" height="29" src="http://www.mkyong.com/wp-content/uploads/2014/07/logo-150x139.jpg" class="attachment-32x32 wp-post-image" alt="log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/logging/log4j-xml-example/">log4j.xml Example </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/spring-logo.png" class="attachment-32x32 wp-post-image" alt="spring-logo" /><div class="rt-label"><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-annotation-example/">Spring Security + Hibernate Annotation Example </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/spring-logo.png" class="attachment-32x32 wp-post-image" alt="spring-logo" /><div class="rt-label"><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-xml-example/">Spring Security + Hibernate XML Example </a></div><div class="clearboth"></div></li></ul></div><h2>Popular Tutorials</h2><div class="block"><ul><li><img width="29" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/03/android.png" class="attachment-32x32 wp-post-image" alt="android" /><div class="rt-label"><a rel="tooltip" title="Created : 2012-03-22 14:48:53" href="http://www.mkyong.com/tutorials/android-tutorial/">Android Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/jsf2-logo.png" class="attachment-32x32 wp-post-image" alt="jsf2-logo" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-12-12 10:56:54" href="http://www.mkyong.com/tutorials/jsf-2-0-tutorials/">JSF 2.0 Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/04/Spring-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Spring tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-04-01 11:09:26" href="http://www.mkyong.com/tutorials/spring-tutorials/">Spring Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/03/maven-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Maven tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-03-31 08:24:51" href="http://www.mkyong.com/tutorials/maven-tutorials/">Maven Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/03/Hibernate-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Hibernate tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-03-31 08:18:30" href="http://www.mkyong.com/tutorials/hibernate-tutorials/">Hibernate Tutorial </a></div><div class="clearboth"></div></li></ul></div><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:600px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7953295395" data-ad-region = "mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads" style="text-align: center"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="160x600" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div></div></div></div></div> <script type='text/javascript'>var _wpcf7={"loaderUrl":"http:\/\/www.mkyong.com\/wp-content\/plugins\/contact-form-7\/images\/ajax-loader.gif","sending":"Sending ...","cached":"1"};</script><footer><div id="footer-container"><div class="container"><div class="row"><div class="span4" id="footer-all-tut"><h3>All Available Tutorials</h3><ul class="unstyled"><li>Java Core Technologies :<div> <a href="/tutorials/java-io-tutorials/">Java I/O</a>, <a href="/tutorials/java-regular-expression-tutorials/">Java RegEx</a>, <a href="/tutorials/java-xml-tutorials/">Java XML</a>, <a href="/tutorials/java-json-tutorials/">Java JSON</a>, <a href="/tutorials/jdbc-tutorials/">JDBC</a>, <a href="/category/java/">Java Misc</a></div></li><li>J2EE Frameworks :<div> <a href="/tutorials/hibernate-tutorials/">Hibernate</a>, <a href="/tutorials/jsf-2-0-tutorials/">JSF 2.0</a>, <a href="/tutorials/spring-tutorials/">Spring Core</a>, <a href="/tutorials/spring-mvc-tutorials/">Spring MVC</a>, <a href="/tutorials/spring-security-tutorials/">Spring Security</a>, <a href="/tutorials/java-mongodb-tutorials/#spring-mongodb">Spring MongoDB</a>, <a href="/tutorials/spring-batch-tutorial/">Spring Batch</a><a href="/tutorials/wicket-tutorials/">Apache Wicket</a>, <a href="/tutorials/struts-tutorials/">Struts 1.x</a>, <a href="/tutorials/struts-2-tutorials/">Struts 2.x</a></div></li><li>Web Service :<div> <a href="/tutorials/jax-ws-tutorials/">JAX-WS (SOAP)</a>, <a href="/tutorials/jax-rs-tutorials/">JAX-RS (REST)</a></div></li><li>Build Tools :<div> <a href="/tutorials/maven-tutorials/">Maven</a>, <a href="/tutorials/apache-archiva-tutorials/">Archiva</a></div></li><li>Unit Test Frameworks :<div> <a href="/tutorials/junit-tutorials/">jUnit</a>, <a href="/tutorials/testng-tutorials/">TestNG</a></div></li><li>Others :<div> <a href="/tutorials/android-tutorial/">Android</a>, <a href="/tutorials/google-app-engine-tutorial/">Google App Engine</a>, <a href="/tutorials/jquery-tutorials/">jQuery</a>, <a href="/tutorials/java-mongodb-tutorials/">Java MongoDB</a>, <a href="/tutorials/quartz-scheduler-tutorial/">Quartz Scheduler</a></div></li></ul></div><div class="span3"><h3>Favorites Links</h3><ul class="unstyled"><li><a href="http://developer.android.com/training/index.html" target="_blank" rel="nofollow">Android Getting Started</a></li><li><a href="https://developers.google.com/appengine/docs/java/gettingstarted/" target="_blank" rel="nofollow">Google App Engine - Java</a></li><li><a href="http://www.dzone.com/" target="_blank" rel="nofollow">DZone - Fresh Links</a></li><li><a href="http://docs.oracle.com/javaee/5/tutorial/doc/docinfo.html" target="_blank" rel="nofollow">Official Java EE 5 Tutorial</a></li><li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/docinfo.html" target="_blank" rel="nofollow">Official Java EE 6 Tutorial</a></li><li><a href="http://docs.oracle.com/javaee/7/tutorial/doc/" target="_blank" rel="nofollow">Official Java EE 7 Tutorial</a></li><li><a href="http://docs.spring.io/spring/docs/2.5.x/reference/index.html" target="_blank" rel="nofollow">Spring 2.5.x documentation</a></li><li><a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/" target="_blank" rel="nofollow">Spring 3.2.x documentation</a></li><li><a href="http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/" target="_blank">Spring Security 3.2.x documentation</a></li><li><a href="http://docs.jboss.org/hibernate/core/4.3/manual/en-US/html_single/" target="_blank" rel="nofollow">Hibernate core 4.3 documentation</a></li><li><a href="http://download.oracle.com/javase/6/docs/api/overview-summary.html" target="_blank" rel="nofollow">Java SE 6.0 API documentation</a></li><li><a href="http://jsp.java.net/" target="_blank" rel="nofollow">JSP home page</a></li><li><a href="http://javaserverfaces.java.net/" target="_blank" rel="nofollow">JSF home page</a></li><li><a href="http://www.eclipse.org/downloads/" target="_blank" rel="nofollow">Eclipse IDE for Java developer</a></li><li><a href="http://struts.apache.org/release/1.3.x/userGuide/index.html" target="_blank" rel="nofollow">Struts 1.3.x documentation</a></li><li><a href="http://struts.apache.org/release/2.3.x/docs/home.html" target="_blank" rel="nofollow">Struts 2.3.x documentation</a></li><li><a href="http://maven.apache.org/" target="_blank" rel="nofollow">Maven home page</a></li><li><a href="http://search.maven.org/" target="_blank" rel="nofollow">Maven central repository Search</a></li><li><a href="http://ant.apache.org/" target="_blank" rel="nofollow">Ant home page</a></li><li><a href="http://jax-ws.java.net/" target="_blank" rel="nofollow">JAX-WS Official Website</a></li><li><a href="http://jersey.java.net/" target="_blank" rel="nofollow">JAX-RS Official Website (Jersey)</a></li></ul></div><div class="span3"><h3>Friends &amp; Links</h3><ul class="unstyled"><input type="hidden" name="activepost" id="activepost" value="3335" /><li><a href="http://www.javacodegeeks.com/" target="_blank">Java Code Geeks</a></li><li><a href="http://www.videophpblog.com" target="_blank">PHP Tutorials</a></li><li><a href="http://www.tenthofmarch.com/" target="_blank">TenthOfMarch</a></li><li><a href="http://www.web2secure.com" target="_blank">Web Security Blog</a></li><li><a href="http://www.fromdev.com" target="_blank">Web Development</a></li><li><a href="http://beust.com" target="_blank">Cédric Beust (TestNG)</a></li></ul></div><div class="span4"><h3>About Us</h3><p> Mkyong.com is a weblog dedicated to Java/J2EE developers and Web Developers. We constantly publish useful tricks, tutorials on J2EE or web development.</p><p> All examples are simple, easy to read, and full source code available, and of course well tested in our development environment.</p> <strong>We're Social</strong><ol><li>Twitter - <a href="http://twitter.com/#!/mkyong" target="_blank">Follow Me</a></li><li>Facebook - <a href="http://www.facebook.com/java.tutorial" target="_blank">Like Me</a></li><li>Google Plus - <a href="https://plus.google.com/110948163568945735692" target="_blank">Add Me</a></li><li>RSS - <a href="http://feeds.feedburner.com/FeedForMkyong" target="_blank">Subscribe Me</a></li></ol></div></div></div></div><div id="footer-copyright"><div class="container"> Copyright &copy; 2008-2014 Mkyong.com, all rights reserved.</div></div></footer><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-752408-5','mkyong.com');ga('send','pageview');</script><script type='text/javascript'>function _dmBootstrap(file){var _dma=document.createElement('script');_dma.type='text/javascript';_dma.async=true;_dma.src=('https:'==document.location.protocol?'https://':'http://')+file;(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(_dma);}
function _dmFollowup(file){if(typeof DMAds==='undefined')_dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
(function(){_dmBootstrap('cdn1.DeveloperMedia.com/a.min.js');setTimeout(_dmFollowup,2000);})();</script><script type="text/javascript" src="/wp-content/themes/mkyong-ma/js/core-latest.js?v=2013"></script><script type="text/javascript">function w3tc_load_js(u){var d=document,p=d.getElementsByTagName('HEAD')[0],c=d.createElement('script');c.type='text/javascript';c.src=u;p.appendChild(c);}</script><script type="text/javascript">w3tc_load_js('http://www.mkyong.com/wp-content/cache/minify/000000/481ba/default.include-footer.15c8b4.js');</script></body></html>